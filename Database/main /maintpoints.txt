# SQL Database Design for BAE Systems Occupational Health Referral System

Based on the provided requirements, I'll design a comprehensive SQL database for the occupational health referral system. This design will include all necessary entities, relationships, and attributes to support the system's functionality.

## Database Schema Design

### Entities and Tables

1. **Employee** - Stores all staff information
2. **Department** - Organizational departments
3. **LineManager** - Managers overseeing employees
4. **ServiceProvider** - Internal/external service providers
5. **Referral** - Main referral records
6. **ReferralStatus** - Status tracking for referrals
7. **ReferralType** - Types of services requested
8. **ReferralNote** - Notes/comments on referrals
9. **Attachment** - Files attached to referrals
10. **Report** - Generated reports
11. **UserRole** - Defines access levels (Staff, Enhanced, EnhancedPlus)

### SQL Creation Script

```sql
-- Create database
CREATE DATABASE OccupationalHealthReferralSystem;
USE OccupationalHealthReferralSystem;

-- Department table
CREATE TABLE Department (
    DepartmentID INT PRIMARY KEY AUTO_INCREMENT,
    DepartmentName VARCHAR(100) NOT NULL,
    DepartmentEmail VARCHAR(100)
);

-- LineManager table
CREATE TABLE LineManager (
    ManagerID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL,
    DepartmentID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)
);

-- Employee table
CREATE TABLE Employee (
    EmployeeID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Phone VARCHAR(20),
    StartDate DATE,
    DepartmentID INT,
    LineManagerID INT,
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    FOREIGN KEY (LineManagerID) REFERENCES LineManager(ManagerID)
);

-- ServiceProvider table
CREATE TABLE ServiceProvider (
    ProviderID INT PRIMARY KEY AUTO_INCREMENT,
    ProviderName VARCHAR(100) NOT NULL,
    ProviderType ENUM('Internal', 'External') NOT NULL,
    ServicesProvided TEXT,
    ProvisionLevel INT CHECK (ProvisionLevel BETWEEN 1 AND 3)
);

-- ReferralType table
CREATE TABLE ReferralType (
    TypeID INT PRIMARY KEY AUTO_INCREMENT,
    TypeName VARCHAR(100) NOT NULL,
    Description TEXT
);

-- UserRole table
CREATE TABLE UserRole (
    RoleID INT PRIMARY KEY AUTO_INCREMENT,
    RoleName VARCHAR(50) NOT NULL,
    Description TEXT,
    CanCreate BOOLEAN DEFAULT FALSE,
    CanRead BOOLEAN DEFAULT TRUE,
    CanUpdate BOOLEAN DEFAULT FALSE,
    CanDelete BOOLEAN DEFAULT FALSE,
    CanApprove BOOLEAN DEFAULT FALSE,
    CanAssign BOOLEAN DEFAULT FALSE
);

-- ReferralStatus table
CREATE TABLE ReferralStatus (
    StatusID INT PRIMARY KEY AUTO_INCREMENT,
    StatusName VARCHAR(50) NOT NULL,
    Description TEXT
);

-- Referral table (main entity)
CREATE TABLE Referral (
    ReferralID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeID INT NOT NULL,
    DepartmentID INT NOT NULL,
    LineManagerID INT NOT NULL,
    ProviderID INT NOT NULL,
    TypeID INT NOT NULL,
    StatusID INT NOT NULL,
    Confidential BOOLEAN DEFAULT FALSE,
    DateRaised DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    DateCompleted DATETIME,
    Description TEXT NOT NULL,
    BudgetQuote DECIMAL(10,2),
    ActualCost DECIMAL(10,2),
    FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID),
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID),
    FOREIGN KEY (LineManagerID) REFERENCES LineManager(ManagerID),
    FOREIGN KEY (ProviderID) REFERENCES ServiceProvider(ProviderID),
    FOREIGN KEY (TypeID) REFERENCES ReferralType(TypeID),
    FOREIGN KEY (StatusID) REFERENCES ReferralStatus(StatusID)
);

-- ReferralNote table
CREATE TABLE ReferralNote (
    NoteID INT PRIMARY KEY AUTO_INCREMENT,
    ReferralID INT NOT NULL,
    EmployeeID INT NOT NULL,
    NoteDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    NoteText TEXT NOT NULL,
    Visibility ENUM('Open', 'Closed') DEFAULT 'Open',
    FOREIGN KEY (ReferralID) REFERENCES Referral(ReferralID),
    FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID)
);

-- Attachment table
CREATE TABLE Attachment (
    AttachmentID INT PRIMARY KEY AUTO_INCREMENT,
    ReferralID INT NOT NULL,
    FileName VARCHAR(255) NOT NULL,
    FileType VARCHAR(50),
    FileSize INT,
    UploadDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FilePath VARCHAR(255) NOT NULL,
    FOREIGN KEY (ReferralID) REFERENCES Referral(ReferralID)
);

-- Report table
CREATE TABLE Report (
    ReportID INT PRIMARY KEY AUTO_INCREMENT,
    ReportName VARCHAR(100) NOT NULL,
    Description TEXT,
    DateGenerated DATETIME DEFAULT CURRENT_TIMESTAMP,
    GeneratedBy INT NOT NULL,
    Parameters TEXT,
    FOREIGN KEY (GeneratedBy) REFERENCES Employee(EmployeeID)
);

-- UserAccess table (for login and permissions)
CREATE TABLE UserAccess (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    EmployeeID INT NOT NULL UNIQUE,
    Username VARCHAR(50) NOT NULL UNIQUE,
    PasswordHash VARCHAR(255) NOT NULL,
    RoleID INT NOT NULL,
    MFAEnabled BOOLEAN DEFAULT FALSE,
    LastLogin DATETIME,
    FOREIGN KEY (EmployeeID) REFERENCES Employee(EmployeeID),
    FOREIGN KEY (RoleID) REFERENCES UserRole(RoleID)
);
```

## Test Data Insertion

```sql
-- Insert sample data into Department
INSERT INTO Department (DepartmentName, DepartmentEmail) VALUES 
('Customer Liaison', 'customer.liaison@baesystems.com'),
('Finances', 'finances@baesystems.com'),
('Media Relations', 'media.relations@baesystems.com'),
('Tech Support', 'tech.support@baesystems.com'),
('Human Resources', 'hr@baesystems.com');

-- Insert sample data into LineManager
INSERT INTO LineManager (EmployeeName, Email, DepartmentID) VALUES 
('Ayanna Santos', 'ayanna.santos@baesystems.com', 1),
('Winter Carney', 'winter.carney@baesystems.com', 2),
('Upton Stanton', 'upton.stanton@baesystems.com', 3),
('Ivor Pugh', 'ivor.pugh@baesystems.com', 4),
('Lane Taylor', 'lane.taylor@baesystems.com', 5);

-- Insert sample data into Employee
INSERT INTO Employee (EmployeeName, Email, Phone, StartDate, DepartmentID, LineManagerID) VALUES 
('Audrey Stein', 'audrey.stein@baesystems.com', '(026) 3688 4870', '2025-06-20', 1, 1),
('Barrett Roman', 'barrett.roman@baesystems.com', '0324 731 1124', '2025-05-31', 2, 2),
('Ivy Haley', 'ivy.haley@baesystems.com', '056 4393 2974', '2025-02-23', 3, 3),
('Bree Howe', 'bree.howe@baesystems.com', '0800 947 3873', '2024-06-06', 4, 4),
('Laurel Mueller', 'laurel.mueller@baesystems.com', '(01748) 48577', '2024-10-02', 5, 5);

-- Insert sample data into ServiceProvider
INSERT INTO ServiceProvider (ProviderName, ProviderType, ServicesProvided, ProvisionLevel) VALUES 
('HR', 'Internal', 'Pre-employment health screening, Employee Assistance Programme', 2),
('BAE Occupational Health Nurse', 'Internal', 'General health check-up, Minor injuries review', 3),
('Hospital Occupational Health Nurse', 'External', 'Check up for specified condition, Return to work assessment', 3),
('Physical Wellbeing', 'External', 'Physiotherapy, Audioptery, Driver/Operator Medical', 3),
('Confidential Wellbeing Help', 'External', 'Counselling, Mental health helpline', 1);

-- Insert sample data into ReferralType
INSERT INTO ReferralType (TypeName, Description) VALUES 
('Physical Health', 'Referrals related to physical health conditions'),
('Mental Health', 'Referrals related to mental health support'),
('Keeping Active', 'Referrals for fitness and activity programs'),
('Self-Help', 'Referrals for self-help resources'),
('Leave of Absence', 'Referrals for medical leave requests');

-- Insert sample data into UserRole
INSERT INTO UserRole (RoleName, Description, CanCreate, CanRead, CanUpdate, CanDelete, CanApprove, CanAssign) VALUES 
('Staff', 'Basic staff access', FALSE, TRUE, FALSE, FALSE, FALSE, FALSE),
('Enhanced', 'Line manager access', TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
('EnhancedPlus', 'HR manager access', TRUE, TRUE, TRUE, TRUE, TRUE, TRUE);

-- Insert sample data into ReferralStatus
INSERT INTO ReferralStatus (StatusName, Description) VALUES 
('Awaiting Approval', 'Referral is pending approval'),
('In Progress', 'Referral is being processed'),
('Deferred', 'Referral has been deferred'),
('On Hold', 'Referral is on hold'),
('Completed', 'Referral has been completed');

-- Insert sample data into Referral
INSERT INTO Referral (EmployeeID, DepartmentID, LineManagerID, ProviderID, TypeID, StatusID, Confidential, DateRaised, Description, BudgetQuote, ActualCost) VALUES 
(1, 1, 1, 2, 1, 2, FALSE, '2025-05-01 09:30:00', 'Back pain assessment required', 150.00, 145.50),
(2, 2, 2, 1, 3, 1, TRUE, '2025-05-02 10:15:00', 'Stress management resources', NULL, NULL),
(3, 3, 3, 3, 2, 3, FALSE, '2025-05-03 11:45:00', 'Anxiety counseling referral', 200.00, NULL),
(4, 4, 4, 4, 1, 4, TRUE, '2025-05-04 14:20:00', 'Physiotherapy for wrist injury', 180.00, 175.00),
(5, 5, 5, 5, 4, 5, FALSE, '2025-05-05 15:30:00', 'Self-help materials request', 50.00, 50.00);

-- Insert sample data into ReferralNote
INSERT INTO ReferralNote (ReferralID, EmployeeID, NoteText, Visibility) VALUES 
(1, 1, 'Initial referral created', 'Open'),
(1, 1, 'Approved by line manager', 'Closed'),
(2, 2, 'Confidential request for stress management', 'Open'),
(3, 3, 'Referred to external provider', 'Open'),
(4, 4, 'Injury documentation attached', 'Open');

-- Insert sample data into Attachment
INSERT INTO Attachment (ReferralID, FileName, FileType, FileSize, FilePath) VALUES 
(4, 'wrist_injury.pdf', 'application/pdf', 1024, '/attachments/wrist_injury_123.pdf'),
(5, 'self_help_resources.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 2048, '/attachments/resources_456.docx');

-- Insert sample data into UserAccess
INSERT INTO UserAccess (EmployeeID, Username, PasswordHash, RoleID, MFAEnabled) VALUES 
(1, 'astein', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 1, TRUE),
(2, 'broman', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 2, FALSE),
(3, 'ihaley', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 1, TRUE),
(4, 'bhowe', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 3, TRUE),
(5, 'lmueller', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 2, FALSE);
```

## Queries Supporting Required Reports

```sql
-- Report 1: Enhanced Plus user report for a particular level, Department, provider and/or provision type and costs
SELECT 
    r.ReferralID,
    e.EmployeeName,
    d.DepartmentName,
    sp.ProviderName,
    rt.TypeName,
    rs.StatusName,
    r.BudgetQuote,
    r.ActualCost,
    r.DateRaised,
    r.DateCompleted
FROM Referral r
JOIN Employee e ON r.EmployeeID = e.EmployeeID
JOIN Department d ON r.DepartmentID = d.DepartmentID
JOIN ServiceProvider sp ON r.ProviderID = sp.ProviderID
JOIN ReferralType rt ON r.TypeID = rt.TypeID
JOIN ReferralStatus rs ON r.StatusID = rs.StatusID
WHERE sp.ProvisionLevel = 3  -- Filter by provision level
AND d.DepartmentID = 1       -- Filter by department
ORDER BY r.DateRaised DESC;

-- Report 2: Enhanced user report for their Department
SELECT 
    r.ReferralID,
    e.EmployeeName,
    rt.TypeName,
    sp.ProviderName,
    rs.StatusName,
    sp.ProvisionLevel,
    r.DateRaised,
    r.DateCompleted,
    r.BudgetQuote,
    r.ActualCost
FROM Referral r
JOIN Employee e ON r.EmployeeID = e.EmployeeID
JOIN Department d ON r.DepartmentID = d.DepartmentID
JOIN ServiceProvider sp ON r.ProviderID = sp.ProviderID
JOIN ReferralType rt ON r.TypeID = rt.TypeID
JOIN ReferralStatus rs ON r.StatusID = rs.StatusID
WHERE d.DepartmentID = 1  -- Current department
AND r.DateRaised BETWEEN '2025-05-01' AND '2025-05-31'  -- Date range
ORDER BY rs.StatusName, r.DateRaised;

-- Report 3: Referral status report (Enhanced and Enhanced Plus users)
SELECT 
    e.EmployeeName,
    d.DepartmentName,
    rt.TypeName,
    sp.ProviderName,
    sp.ProvisionLevel,
    rs.StatusName,
    r.DateRaised,
    (SELECT NoteText FROM ReferralNote WHERE ReferralID = r.ReferralID AND Visibility = 'Open' ORDER BY NoteDate DESC LIMIT 1) AS LatestOpenNote
FROM Referral r
JOIN Employee e ON r.EmployeeID = e.EmployeeID
JOIN Department d ON r.DepartmentID = d.DepartmentID
JOIN ServiceProvider sp ON r.ProviderID = sp.ProviderID
JOIN ReferralType rt ON r.TypeID = rt.TypeID
JOIN ReferralStatus rs ON r.StatusID = rs.StatusID
WHERE rs.StatusName NOT IN ('Completed')
ORDER BY d.DepartmentName, e.EmployeeName;

-- Report 4: Individual staff referral update report
SELECT 
    r.ReferralID,
    rt.TypeName,
    sp.ProviderName,
    rs.StatusName,
    r.DateRaised,
    r.DateCompleted,
    r.Description,
    r.BudgetQuote,
    r.ActualCost,
    n.NoteText,
    n.NoteDate,
    a.FileName
FROM Referral r
JOIN ReferralType rt ON r.TypeID = rt.TypeID
JOIN ServiceProvider sp ON r.ProviderID = sp.ProviderID
JOIN ReferralStatus rs ON r.StatusID = rs.StatusID
LEFT JOIN ReferralNote n ON r.ReferralID = n.ReferralID AND n.Visibility = 'Open'
LEFT JOIN Attachment a ON r.ReferralID = a.ReferralID
WHERE r.EmployeeID = 1  -- Current employee
ORDER BY r.DateRaised DESC, n.NoteDate DESC;

-- Report 5: Ad-hoc data export for analysis
SELECT 
    r.ReferralID,
    e.EmployeeName,
    e.Email,
    d.DepartmentName,
    lm.EmployeeName AS LineManager,
    rt.TypeName,
    sp.ProviderName,
    sp.ProviderType,
    sp.ProvisionLevel,
    rs.StatusName,
    r.Confidential,
    r.DateRaised,
    r.DateCompleted,
    r.BudgetQuote,
    r.ActualCost,
    r.Description
FROM Referral r
JOIN Employee e ON r.EmployeeID = e.EmployeeID
JOIN Department d ON r.DepartmentID = d.DepartmentID
JOIN LineManager lm ON r.LineManagerID = lm.ManagerID
JOIN ServiceProvider sp ON r.ProviderID = sp.ProviderID
JOIN ReferralType rt ON r.TypeID = rt.TypeID
JOIN ReferralStatus rs ON r.StatusID = rs.StatusID
ORDER BY r.DateRaised;
```

## Database Documentation

### Entity Relationship Diagram (ERD) Description

The database follows a relational model with the following key relationships:

1. **Employee** belongs to a **Department** and has a **LineManager**
2. **Referral** is created by an **Employee** and associated with:
   - A **Department**
   - A **LineManager**
   - A **ServiceProvider**
   - A **ReferralType**
   - A **ReferralStatus**
3. **Referral** can have multiple **ReferralNote** entries
4. **Referral** can have multiple **Attachment** files
5. **Employee** has **UserAccess** credentials with a specific **UserRole**

### Assumptions and Justifications

1. **Confidentiality**: Implemented as a boolean flag in the Referral table to mark sensitive referrals.
2. **Access Control**: UserRole table defines permissions for different user types (Staff, Enhanced, EnhancedPlus).
3. **Multi-Factor Authentication**: MFAEnabled flag in UserAccess table supports the security requirement.
4. **Note Visibility**: Open/Closed visibility for notes implements the requirement for different note access levels.
5. **Service Providers**: ProviderType and ProvisionLevel fields align with Appendix A requirements.
6. **Cost Tracking**: BudgetQuote and ActualCost fields support financial reporting requirements.
7. **Status Tracking**: Comprehensive status options cover all required workflow states.

### Security Measures

1. **Password Hashing**: User passwords are stored as hashes (not plain text).
2. **MFA Support**: System supports multi-factor authentication.
3. **Role-Based Access**: Granular permissions control what users can do.
4. **Confidentiality Flag**: Marks sensitive referrals for additional protection.
5. **Note Visibility**: Controls who can see specific notes.
6. **GDPR Compliance**: Includes data retention fields (DateCompleted) and access controls.

## Professional Organization of Files

For submission, organize the database files as follows:

```
Database_Folder/
├── SQL_Scripts/
│   ├── 01_Database_Creation.sql
│   ├── 02_Test_Data_Insertion.sql
│   └── 03_Report_Queries.sql
├── Documentation/
│   ├── ERD_Diagram.png
│   ├── Database_Schema.pdf
│   └── Design_Assumptions.docx
└── Security/
    ├── Access_Control_Matrix.xlsx
    └── GDPR_Compliance_Checklist.docx
```

This design meets all the specified requirements:
1. All entities are reflected as tables
2. All relationships are properly implemented with foreign keys
3. Comprehensive test data demonstrates the relationships
4. Attributes support all required functionality from the brief
5. Queries provide all required reporting capabilities
6. Professional organization of files for submission

The database supports all "Must Have" requirements and many "Should Have" requirements from the scenario document.